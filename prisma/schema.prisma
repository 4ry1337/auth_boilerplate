// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Session {
  id     String      @id @default(uuid())
  userId String @unique
  user User @relation(fields: [userId], references: [id])
  refreshToken String
  accessToken String
  expires Int
  createdAt DateTime
  updatedAt DateTime
}

model User {
  id      String      @id @default(uuid())
  email   String   @unique
  emailVerified DateTime?
  password String
  salt Int @db.SmallInt
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  session Session?
  roles userRoles[]
  roleCreator Role[] @relation("RoleCreator")
  roleUpdater Role[] @relation("RoleUpdater")
  userRoles userRoles[] @relation("RoleAssigner")
  profile Profile?
  post Post[]
}

model userRoles {
  role Role @relation(fields: [roleId], references: [id])
  roleId Int
  user User @relation(fields: [userId], references: [id])
  userId String
  assignedAt   DateTime @default(now())
  assignedBy   String?
  roleAssigner User? @relation("RoleAssigner", fields: [assignedBy], references: [id])

  @@id([roleId, userId])
}

model Role {
  id Int @id @default(autoincrement())
  label String
  description String?
  permissions Permission[]
  users userRoles[]
  createdAt   DateTime    @default(now())
  createdBy   String?
  creator     User?       @relation("RoleCreator", fields: [createdBy], references: [id])
  updatedAt   DateTime    @updatedAt
  updatedBy   String?
  updater     User?       @relation("RoleUpdater", fields: [updatedBy], references: [id])
}

enum Permission {
  MANAGEDEPARTMENT
  MANAGEROLE
  MANAGEUSER
  MANAGETASK
  MANAGEMESSAGES
  MANAGENEWS
  KICKMEMBERS
}

model Profile {
  id     Int    @id @default(autoincrement())
  firstname    String?
  lastname    String?
  bio    String
  user   User   @relation(fields: [userId], references: [id])
  userId String    @unique
  image String?
}

model Post {
  id         Int        @id @default(autoincrement())
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
  title      String
  content String
  files String[]
  published  Boolean    @default(false)
  author     User       @relation(fields: [authorId], references: [id])
  authorId   String
}

